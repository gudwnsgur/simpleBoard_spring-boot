** DAO(Mapper)와 Service는 interface와 class파일이 한세트로 구성

1. controller -> tamplate(freemarker) 데이터 전달하는 법
 (0). import org.springframework.ui.Model;
 (1). controller에서 매개변수에 Model model 추가
 (2). 코드 : model.addAttribute("id", inputId);
 (3). ftlh 파일에서 <h3>My ID : ${id}</h3> 와 같이 id 사용


2. template(freemarker)에서 받은 정보를 controller post에 전달하는 법
  (1). <form name=" " action= "post에 해당하는 함수의 url" method="post">
  (2). 이 안에 넘겨야 할 내용을 name으로 추가
  (3). <input type="submit" value="버튼의 내용">


.dao : db와 연동할 mapper및 dao interface를 모아둔 package
.dto : db table의 model class(dto)를 모아둔 package

3.
spring.datasource.url=jdbc:mysql://localhost:3306/{스키마명}?autoReconnect=true&useSSL=false
spring.datasource.username={username}
spring.datasource.password={userpassword}
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
 ==> AWS RDS를 사용하는 경우 RDS의 endpoint&port를 작성


4. spring DB 관련 용어
    (0). JDBC : Java DB Connectivity -> MyBatis 로 JDBC를 편하게 사용 가능
    (1). hikariCP : spring boot 2.0부터 default JDBC connection pool
    (2). h2 : JAVA 기반 오픈소스 RDBMS
    (3). JPA : JAVA Persistence API(자바 ORM 기술에 대한 표준 명세)
                => ORM을 위한 자바 표준

5. SQL Mapper(MyBatis, jdbcTemplates) vs. ORM(Object-Relational Mapping : JPA, Hibernate)

6. Spring boot & MyBatis & MySQL & HikariCP

    [case 1] Controller.java - Service.java - Mapper.java - DTO.java
                                                           - Mapper.xml

    [case 2] Controller.java - Service.java - DAO.java - DTO.java
                                                       - Mapper.xml

7.MyBatis 설정
    (1) MyBatis 환경설정 파일(SqlSessionConfig.xml)
        => TypeAlias(별칭설정) & DB연동 설정 & Mapper 설정파일 등록
    (2) Mapper 설정 파일(member.xml, company.xml)

